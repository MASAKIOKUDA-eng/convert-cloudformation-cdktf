"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationParser = void 0;
const fs = require("fs");
const yaml = require("js-yaml");
// CloudFormation YAML タグのカスタムスキーマ
const cfnSchema = yaml.DEFAULT_SCHEMA.extend([
    new yaml.Type('!Ref', {
        kind: 'scalar',
        construct: function (data) {
            return { Ref: data };
        }
    }),
    new yaml.Type('!GetAtt', {
        kind: 'scalar',
        construct: function (data) {
            const parts = data.split('.');
            return { 'Fn::GetAtt': [parts[0], parts.slice(1).join('.')] };
        }
    }),
    new yaml.Type('!Sub', {
        kind: 'scalar',
        construct: function (data) {
            return { 'Fn::Sub': data };
        }
    }),
    new yaml.Type('!Join', {
        kind: 'sequence',
        construct: function (data) {
            return { 'Fn::Join': data };
        }
    })
]);
/**
 * CloudFormation template parser
 */
class CloudFormationParser {
    /**
     * Parse a CloudFormation template from a file
     * @param filePath Path to the CloudFormation template file
     */
    static parseFile(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        if (filePath.endsWith('.json')) {
            return JSON.parse(content);
        }
        else if (filePath.endsWith('.yaml') || filePath.endsWith('.yml')) {
            return yaml.load(content, { schema: cfnSchema });
        }
        else {
            throw new Error(`Unsupported file format: ${filePath}`);
        }
    }
}
exports.CloudFormationParser = CloudFormationParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyc2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6QixnQ0FBZ0M7QUFnQmhDLGtDQUFrQztBQUNsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUMzQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3BCLElBQUksRUFBRSxRQUFRO1FBQ2QsU0FBUyxFQUFFLFVBQVMsSUFBSTtZQUN0QixPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3ZCLENBQUM7S0FDRixDQUFDO0lBQ0YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUN2QixJQUFJLEVBQUUsUUFBUTtRQUNkLFNBQVMsRUFBRSxVQUFTLElBQUk7WUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNoRSxDQUFDO0tBQ0YsQ0FBQztJQUNGLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDcEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxTQUFTLEVBQUUsVUFBUyxJQUFJO1lBQ3RCLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDN0IsQ0FBQztLQUNGLENBQUM7SUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ3JCLElBQUksRUFBRSxVQUFVO1FBQ2hCLFNBQVMsRUFBRSxVQUFTLElBQUk7WUFDdEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM5QixDQUFDO0tBQ0YsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBYSxvQkFBb0I7SUFDL0I7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFnQjtRQUN0QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVsRCxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUEyQixDQUFDO1FBQ3ZELENBQUM7YUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ25FLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQTJCLENBQUM7UUFDN0UsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFoQkQsb0RBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgeWFtbCBmcm9tICdqcy15YW1sJztcblxuZXhwb3J0IGludGVyZmFjZSBDbG91ZEZvcm1hdGlvblRlbXBsYXRlIHtcbiAgQVdTVGVtcGxhdGVGb3JtYXRWZXJzaW9uPzogc3RyaW5nO1xuICBEZXNjcmlwdGlvbj86IHN0cmluZztcbiAgUGFyYW1ldGVycz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIFJlc291cmNlczogUmVjb3JkPHN0cmluZywgQ2xvdWRGb3JtYXRpb25SZXNvdXJjZT47XG4gIE91dHB1dHM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb3VkRm9ybWF0aW9uUmVzb3VyY2Uge1xuICBUeXBlOiBzdHJpbmc7XG4gIFByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIERlcGVuZHNPbj86IHN0cmluZyB8IHN0cmluZ1tdO1xufVxuXG4vLyBDbG91ZEZvcm1hdGlvbiBZQU1MIOOCv+OCsOOBruOCq+OCueOCv+ODoOOCueOCreODvOODnlxuY29uc3QgY2ZuU2NoZW1hID0geWFtbC5ERUZBVUxUX1NDSEVNQS5leHRlbmQoW1xuICBuZXcgeWFtbC5UeXBlKCchUmVmJywge1xuICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHsgUmVmOiBkYXRhIH07XG4gICAgfVxuICB9KSxcbiAgbmV3IHlhbWwuVHlwZSgnIUdldEF0dCcsIHtcbiAgICBraW5kOiAnc2NhbGFyJyxcbiAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gZGF0YS5zcGxpdCgnLicpO1xuICAgICAgcmV0dXJuIHsgJ0ZuOjpHZXRBdHQnOiBbcGFydHNbMF0sIHBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKV0gfTtcbiAgICB9XG4gIH0pLFxuICBuZXcgeWFtbC5UeXBlKCchU3ViJywge1xuICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHsgJ0ZuOjpTdWInOiBkYXRhIH07XG4gICAgfVxuICB9KSxcbiAgbmV3IHlhbWwuVHlwZSgnIUpvaW4nLCB7XG4gICAga2luZDogJ3NlcXVlbmNlJyxcbiAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiB7ICdGbjo6Sm9pbic6IGRhdGEgfTtcbiAgICB9XG4gIH0pXG5dKTtcblxuLyoqXG4gKiBDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSBwYXJzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIENsb3VkRm9ybWF0aW9uUGFyc2VyIHtcbiAgLyoqXG4gICAqIFBhcnNlIGEgQ2xvdWRGb3JtYXRpb24gdGVtcGxhdGUgZnJvbSBhIGZpbGVcbiAgICogQHBhcmFtIGZpbGVQYXRoIFBhdGggdG8gdGhlIENsb3VkRm9ybWF0aW9uIHRlbXBsYXRlIGZpbGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcGFyc2VGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBDbG91ZEZvcm1hdGlvblRlbXBsYXRlIHtcbiAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpO1xuICAgIFxuICAgIGlmIChmaWxlUGF0aC5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudCkgYXMgQ2xvdWRGb3JtYXRpb25UZW1wbGF0ZTtcbiAgICB9IGVsc2UgaWYgKGZpbGVQYXRoLmVuZHNXaXRoKCcueWFtbCcpIHx8IGZpbGVQYXRoLmVuZHNXaXRoKCcueW1sJykpIHtcbiAgICAgIHJldHVybiB5YW1sLmxvYWQoY29udGVudCwgeyBzY2hlbWE6IGNmblNjaGVtYSB9KSBhcyBDbG91ZEZvcm1hdGlvblRlbXBsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGZpbGUgZm9ybWF0OiAke2ZpbGVQYXRofWApO1xuICAgIH1cbiAgfVxufVxuIl19